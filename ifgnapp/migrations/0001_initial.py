# Generated by Django 5.1.1 on 2025-03-24 13:22

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='contact_us',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, verbose_name='name:')),
                ('email', models.CharField(max_length=100, verbose_name="user's email address")),
                ('country', models.CharField(max_length=250, verbose_name='country:')),
                ('msg', models.TextField(verbose_name="user's message")),
                ('user_ip', models.CharField(blank=True, max_length=250, null=True, verbose_name='user ip address')),
                ('date', models.DateTimeField(default=datetime.datetime.utcnow, verbose_name='date of request')),
            ],
            options={
                'verbose_name': 'Contact us',
                'verbose_name_plural': 'Contact us',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='name of the course:')),
                ('des', models.TextField(default='Add a nice description of the Course here.', verbose_name='description of the Course:')),
                ('num_students', models.SmallIntegerField(default=0, verbose_name='Number of Students')),
                ('num_views', models.IntegerField(default=0, verbose_name='Number of views')),
                ('price', models.SmallIntegerField(default=0, verbose_name='Course price:')),
                ('image', models.ImageField(upload_to='course-images/', verbose_name='course image:')),
                ('p_type', models.CharField(choices=[('Programming', 'Programming'), ('Design', 'Design'), ('Marketing', 'Marketing'), ('Business', 'Business'), ('Data Science', 'Data Science')], max_length=20, verbose_name='select course category:')),
                ('vidfile', models.FileField(upload_to='course-video/', verbose_name='Course video:')),
                ('date', models.DateTimeField(verbose_name='publication date')),
                ('is_img_edited', models.BooleanField(default=False, verbose_name='to track edited images')),
                ('is_published', models.BooleanField(default=False, verbose_name='click this to publish image')),
            ],
            options={
                'verbose_name': 'Our Course',
                'verbose_name_plural': 'Our Courses',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='error_log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.TextField(verbose_name='the error message')),
                ('funct', models.CharField(max_length=500, verbose_name='the fuction where the error occoured')),
                ('date', models.DateTimeField(default=datetime.datetime.utcnow, verbose_name='date of the error')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='g_image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name of image:')),
                ('visit', models.BigIntegerField(default=0, verbose_name='number of clicks')),
                ('image', models.ImageField(blank=True, null=True, upload_to='ifgn-images/', verbose_name='your main image')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='ifgn-thumbnail/', verbose_name='image thumbnail, (do not add this)')),
                ('date', models.DateTimeField(verbose_name='publication date')),
                ('is_img_edited', models.BooleanField(default=False, verbose_name='track edited images')),
            ],
            options={
                'verbose_name': 'IFGN Image',
                'verbose_name_plural': 'IFGN Images',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='in_link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100, verbose_name='text to appear in between the link:')),
                ('link', models.URLField(max_length=300, verbose_name='the url of the link:')),
                ('is_internal', models.BooleanField(verbose_name='click this if this link is from our website:')),
                ('use_this', models.TextField(blank=True, verbose_name='copy this one and use it, after you have saved the article:')),
                ('link_str', models.CharField(max_length=100, null=True, verbose_name='identification string, do not add this:')),
                ('clicks', models.IntegerField(default=0, verbose_name='number of clicks on this link:')),
            ],
            options={
                'verbose_name': 'Generated Link',
                'verbose_name_plural': 'Generated Links',
            },
        ),
        migrations.CreateModel(
            name='my_image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, verbose_name='name of image including the photo credit')),
                ('image', models.ImageField(blank=True, null=True, upload_to='photos/', verbose_name='The image file')),
                ('url', models.TextField(blank=True, null=True, verbose_name='image link: (copy this and add it where you want this image to appear in your article)')),
                ('has_edited_img', models.BooleanField(default=False, verbose_name='used to track image that has been edited, do not change this!!')),
                ('is_link', models.BooleanField(default=False, verbose_name='used to track if the link is available!!')),
            ],
            options={
                'verbose_name': 'Image Link Generator',
                'verbose_name_plural': 'Image Link Generators',
            },
        ),
        migrations.CreateModel(
            name='site_page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('contact', 'contact'), ('home', 'home'), ('about', 'about'), ('terms', 'terms')], default='about', max_length=50, unique=True, verbose_name='name of the page')),
                ('data', models.TextField(blank=True, null=True, verbose_name='page contents, you can also add HTML tags:')),
                ('image', models.ImageField(blank=True, null=True, upload_to='photos/', verbose_name='page image:')),
            ],
            options={
                'verbose_name': 'Website Page',
                'verbose_name_plural': 'Website Pages',
            },
        ),
        migrations.CreateModel(
            name='staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='staffs name')),
                ('bio', models.TextField(verbose_name='staffs biography')),
                ('country', models.CharField(default='Nigeria', max_length=300, verbose_name="staff's country")),
                ('visit_count', models.BigIntegerField(default=0, verbose_name='number of visit')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='staffpics', verbose_name='staff image')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='staffpics', verbose_name='staff image2 ')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='staffpics', verbose_name='staff image3 ')),
                ('channel', models.URLField(blank=True, null=True, verbose_name='youtube channel link')),
                ('instagram_link', models.URLField(blank=True, null=True, verbose_name='instagram profile link')),
                ('twitter_link', models.URLField(blank=True, null=True, verbose_name='twitter profile link')),
                ('fb_link', models.URLField(blank=True, null=True, verbose_name='facebook profile link')),
                ('website_link', models.URLField(blank=True, null=True, verbose_name='website profile link')),
            ],
        ),
        migrations.CreateModel(
            name='course_code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_num', models.CharField(blank=True, max_length=50, null=True, verbose_name='the course code (save this to generate a code):')),
                ('date', models.DateTimeField(verbose_name='publication date')),
                ('has_saved', models.BooleanField(default=False, editable=False, verbose_name='to track saved code')),
                ('is_active', models.BooleanField(default=False, verbose_name='tick to activate the code')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ifgnapp.course')),
            ],
            options={
                'verbose_name': 'Course Code',
                'verbose_name_plural': 'Course Codes',
            },
        ),
        migrations.CreateModel(
            name='post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='name of the article')),
                ('s_title', models.TextField(verbose_name='the search title of the article, make the title descriptive and simple, this is how google and other search engines will define your page.')),
                ('title', models.TextField(verbose_name='title of the article, make the title descriptive and simple')),
                ('meta', models.TextField(verbose_name='description of this article, make sure you describe this article properly and also add what people may ask google to get this article, this is how google and other search engines will see your post, please include what you think people will be searching for to see your post')),
                ('content1', models.TextField(verbose_name='The main article body one, write a good and correct article with proper descriptions and refference. \n \n To create tags and format your text use ## followed by the format you want. \n \n Examples are: \n \n ##h1, ##h2, ##h3, and ##h4 will make a header for you to add it use ##h2 Your_header_text ##eh2, this will make a header with the Your_header_text inside it. To make a paragraph use ##pr your_text ##pr, to make some text bold use ##b your_text ##eb, below are the list of all possible formats \n \n \n ##b your_text ##eb to bold text. \n \n ##it your_text ##eit to make text italic. \n \n ##pr your_text ##epr to make a text paragraph. \n \n ##h2 your_text ##eh2 to make a header 2. \n \n ##h3 your_text ##eh3 to make a header 3 \n \n ##qt your_text ##eqt to mke a quote from a text. \n \n ##b your_text ##eb to bold text. \n \n ##b your_text ##eb to bold text. \n \n ##dv your_text ##edv to make a div. \n \n ##sp your_text ##esp to make a span. \n \n ##nl to break your sentence adding spaces below and above it. \n \n To make a list you need to add the type of list you want followed by the lists, Exmample: \n ##olis (ordered list) or ##ulis (for unordered list) \n \n ##lis Your_first_list_text ##elis \n \n ##lis Your_secound_list_text ##elis, add as many list as you want and close it with ##eolis (end  ordered list) \n \n or #eulis (to end unordered list). \n \n You can use this same format in the article body two and three below. \n \n \n Always save and review your article, if you added the format properly it wil all change to the disered tag and if it still display as you added it then you made a mistake, review and change it untill it display corectly.')),
                ('content2', models.TextField(blank=True, null=True, verbose_name='The article number body two, you can add this if the article is a bit lenghty.')),
                ('content3', models.TextField(blank=True, null=True, verbose_name="Third article, you can add this if the article is a very long story that it can't fit to the first and secound page")),
                ('category', models.CharField(choices=[('Health', 'Health'), ('Event', 'Event'), ('Lifestyle', 'Lifestyle'), ('Travel', 'Travel'), ('Empowerment', 'Empowerment'), ('Gist', 'Gist'), ('Review', 'Review'), ('Our_Review', 'Our_Review'), ('Social', 'Social'), ('Finance', 'Finance'), ('Business', 'Business'), ('Food', 'Food'), ('Education', 'Education'), ('Culture', 'Culture'), ('Sponsorship', 'Sponsorship')], default='Gists', max_length=20, verbose_name='select the category you wish to classify this post under')),
                ('post_type', models.CharField(choices=[('Articles', 'Articles'), ('Tips', 'Tips'), ('News', 'News'), ('Reviews', 'Reviews'), ('Education', 'Education'), ('Entertainment', 'Entertainment')], default='News', max_length=50, verbose_name='please select a proper type for this post')),
                ('pub_date', models.DateTimeField(verbose_name='publication date')),
                ('visit', models.BigIntegerField(default=0, verbose_name='number of visits')),
                ('image1', models.ImageField(blank=True, null=True, upload_to='post-images/', verbose_name='image number 1')),
                ('photo_cred1', models.CharField(blank=True, max_length=200, null=True, verbose_name='Photo credit one')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='post-images/', verbose_name='image number 2')),
                ('photo_cred2', models.CharField(blank=True, max_length=200, null=True, verbose_name='Photo credit two')),
                ('frame', models.TextField(blank=True, null=True, verbose_name='embeded contents, like youtube videos, or social media posts.')),
                ('is_img_edited', models.BooleanField(default=False, verbose_name='to track edited images')),
                ('is_published', models.BooleanField(default=False, verbose_name='click this to publish your article')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='article-thumbnail/', verbose_name='image thumbnail, do not add this')),
                ('graph_img', models.ImageField(blank=True, null=True, upload_to='post-graph-img/', verbose_name='new png image, do not add this it will be auto-generated.')),
                ('slug_name', models.SlugField(max_length=250, null=True, unique=True, verbose_name='url of the content, do not add this')),
                ('tags', models.TextField(blank=True, null=True, verbose_name='tags: [Keywords, names, or places that appears on the article.] Ex: "Ugochukwu, Withubb, St. Mary\'s Hospital, Enugu, etc."')),
                ('has_uploaded', models.BooleanField(default=False, verbose_name='for Api Upload, do not check this')),
                ('search_str', models.TextField(blank=True, null=True, verbose_name='for searching the article')),
                ('read_time', models.CharField(blank=True, max_length=300, null=True, verbose_name='read time:')),
                ('helpful_rate', models.IntegerField(default=0, verbose_name='helpful ratings:')),
                ('not_helpful_rate', models.IntegerField(default=0, verbose_name='not helpful ratings:')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ifgnapp.staff')),
            ],
            options={
                'verbose_name': 'Post and Update',
                'verbose_name_plural': 'Posts and Updates',
                'ordering': ['-pub_date'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='tutors',
            field=models.ManyToManyField(to='ifgnapp.staff'),
        ),
    ]
